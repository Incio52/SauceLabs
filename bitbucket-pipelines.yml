# UI tests con Serenity/Selenium + Chrome (headless)
image: maven:3.9.6-eclipse-temurin-17

definitions:
  caches:
    maven: ~/.m2

pipelines:
  default:
    - step:
        name: UI Tests (Serenity/Selenium)
        caches:
          - maven
        script:
          # Dependencias base
          - apt-get update && apt-get install -y wget unzip curl gnupg ca-certificates

          # Instalar Google Chrome (vía .deb para evitar problemas de llaves/repos)
          - wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          - apt-get install -y ./google-chrome-stable_current_amd64.deb || apt-get -f install -y

          # Normalizar binario a /usr/bin/google-chrome y mostrar versión
          - |
            set -e
            BIN="$(command -v google-chrome || true)"
            [ -z "$BIN" ] && BIN="$(command -v google-chrome-stable || true)"
            if [ -z "$BIN" ]; then
              echo "ERROR: Chrome no está instalado o no está en PATH"
              exit 1
            fi
            echo "Chrome bin => $BIN"
            "$BIN" --version || true
            ln -sf "$BIN" /usr/bin/google-chrome

          # Descargar Chromedriver compatible (misma major) con fallback a LATEST_RELEASE
          - |
            set -e
            MAJOR="$(google-chrome --version | grep -oE '[0-9]+' | head -1 || true)"
            if [ -n "$MAJOR" ]; then
              VER="$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${MAJOR}" || true)"
              case "$VER" in *.*) : ;; *) echo "WARN: fallback a LATEST_RELEASE"; VER="$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE)";; esac
            else
              echo "WARN: no se pudo leer la major; usando LATEST_RELEASE"
              VER="$(curl -s https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE)"
            fi
            echo "Usando ChromeDriver: $VER"
            wget -q -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/${VER}/linux64/chromedriver-linux64.zip"
            unzip -o /tmp/chromedriver.zip -d /tmp
            mkdir -p drivers
            mv -f /tmp/chromedriver-linux64/chromedriver drivers/
            chmod +x drivers/chromedriver
            drivers/chromedriver --version

          # Pre-chequeo del servicio Chromedriver
          - drivers/chromedriver --port=9515 > target/chromedriver-boot.log 2>&1 &
          - sleep 2 && curl -s http://127.0.0.1:9515/status || true

          # Base URL de la app bajo prueba (cámbiala si no usas SauceDemo)
          - export BASE_URL="https://www.saucedemo.com/"
          - echo "BASE_URL=${BASE_URL}"
          - curl -I -L --retry 3 --fail "${BASE_URL}"

          # Ejecutar tests (puedes añadir -Dcucumber.filter.tags=@smoke para iterar)
          - mvn -B clean test \
              -Dserenity.configuration=serenity-ci.properties \
              -Dwebdriver.chrome.driver="$(pwd)/drivers/chromedriver" \
              -Dwebdriver.base.url="${BASE_URL}"

          # Reporte Serenity
          - mvn -B serenity:aggregate
        artifacts:
          - "target/site/serenity/**"
          - "target/serenity/**"
          - "target/screenshots/**"
          - "target/chromedriver.log"
          - "target/chromedriver-boot.log"
        test:
          reports:
            junit:
              - "target/surefire-reports/*.xml"
              - "target/failsafe-reports/*.xml"
