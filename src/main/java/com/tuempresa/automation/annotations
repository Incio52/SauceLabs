package com.automation.annotations;

import io.qameta.allure.Allure;
import io.qameta.allure.SeverityLevel;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.abilities.BrowseTheWeb;

/**
 * Anotaciones personalizadas para Allure
 */
public class AllureAnnotations {

    /**
     * Anota un test como feature de login
     */
    public static void loginFeature() {
        Allure.feature("Login");
        Allure.story("User Authentication");
        Allure.label("component", "Authentication");
    }

    /**
     * Anota un test como feature de carrito
     */
    public static void cartFeature() {
        Allure.feature("Shopping Cart");
        Allure.story("Cart Management");
        Allure.label("component", "Shopping");
    }

    /**
     * Anota un test como feature de inventario
     */
    public static void inventoryFeature() {
        Allure.feature("Product Inventory");
        Allure.story("Product Management");
        Allure.label("component", "Inventory");
    }

    /**
     * Anota un test como smoke test
     */
    public static void smokeTest() {
        Allure.label("testType", "smoke");
        Allure.label("priority", "high");
        Allure.label("severity", SeverityLevel.CRITICAL.value());
    }

    /**
     * Anota un test como regression test
     */
    public static void regressionTest() {
        Allure.label("testType", "regression");
        Allure.label("priority", "medium");
        Allure.label("severity", SeverityLevel.NORMAL.value());
    }

    /**
     * Anota un test como functional test
     */
    public static void functionalTest() {
        Allure.label("testType", "functional");
        Allure.label("priority", "high");
        Allure.label("severity", SeverityLevel.NORMAL.value());
    }

    /**
     * Anota un test como negative test
     */
    public static void negativeTest() {
        Allure.label("testType", "negative");
        Allure.label("priority", "medium");
        Allure.label("severity", SeverityLevel.MINOR.value());
    }

    /**
     * Anota un test con información del ambiente
     */
    public static void environmentInfo() {
        Allure.label("environment", "test");
        Allure.label("browser", "chrome");
        Allure.label("version", "140.0.7339.128");
        Allure.label("os", "Windows 11");
    }

    /**
     * Anota un test con información del equipo
     */
    public static void teamInfo() {
        Allure.label("owner", "QA Team");
        Allure.label("team", "Automation");
        Allure.label("project", "SauceDemo");
    }

    /**
     * Anota un test con información de la aplicación
     */
    public static void applicationInfo() {
        Allure.label("application", "SauceDemo");
        Allure.label("url", "https://www.saucedemo.com");
        Allure.label("version", "1.0.0");
    }

    /**
     * Anota un test con información de performance
     */
    public static void performanceInfo() {
        Allure.label("performance", "true");
        Allure.label("loadTest", "false");
        Allure.label("stressTest", "false");
    }

    /**
     * Anota un test con información de seguridad
     */
    public static void securityInfo() {
        Allure.label("security", "true");
        Allure.label("authentication", "required");
        Allure.label("authorization", "required");
    }

    /**
     * Anota un test con información de API
     */
    public static void apiInfo() {
        Allure.label("api", "true");
        Allure.label("endpoint", "REST");
        Allure.label("protocol", "HTTP");
    }

    /**
     * Anota un test con información de UI
     */
    public static void uiInfo() {
        Allure.label("ui", "true");
        Allure.label("frontend", "React");
        Allure.label("responsive", "true");
    }

    /**
     * Anota un test con información de base de datos
     */
    public static void databaseInfo() {
        Allure.label("database", "true");
        Allure.label("dbType", "PostgreSQL");
        Allure.label("migration", "required");
    }

    /**
     * Anota un test con información de integración
     */
    public static void integrationInfo() {
        Allure.label("integration", "true");
        Allure.label("external", "false");
        Allure.label("internal", "true");
    }

    /**
     * Anota un test con información de monitoreo
     */
    public static void monitoringInfo() {
        Allure.label("monitoring", "true");
        Allure.label("alerting", "enabled");
        Allure.label("logging", "enabled");
    }

    /**
     * Anota un test con información de documentación
     */
    public static void documentationInfo() {
        Allure.label("documentation", "required");
        Allure.label("wiki", "https://wiki.example.com");
        Allure.label("confluence", "https://confluence.example.com");
    }

    /**
     * Anota un test con información de release
     */
    public static void releaseInfo(String version) {
        Allure.label("release", version);
        Allure.label("deployment", "automated");
        Allure.label("rollback", "available");
    }

    /**
     * Anota un test con información de bug
     */
    public static void bugInfo(String bugId) {
        Allure.label("bug", bugId);
        Allure.label("jira", "https://jira.example.com/browse/" + bugId);
        Allure.label("status", "open");
    }

    /**
     * Anota un test con información de feature request
     */
    public static void featureRequestInfo(String featureId) {
        Allure.label("feature", featureId);
        Allure.label("jira", "https://jira.example.com/browse/" + featureId);
        Allure.label("status", "in-progress");
    }

    /**
     * Anota un test con información de test case
     */
    public static void testCaseInfo(String testCaseId) {
        Allure.label("testCase", testCaseId);
        Allure.label("testRail", "https://testrail.example.com/index.php?/cases/view/" + testCaseId);
        Allure.label("status", "active");
    }

    /**
     * Anota un test con información de requirement
     */
    public static void requirementInfo(String requirementId) {
        Allure.label("requirement", requirementId);
        Allure.label("jira", "https://jira.example.com/browse/" + requirementId);
        Allure.label("status", "approved");
    }

    /**
     * Anota un test con información de epic
     */
    public static void epicInfo(String epicId) {
        Allure.label("epic", epicId);
        Allure.label("jira", "https://jira.example.com/browse/" + epicId);
        Allure.label("status", "active");
    }

    /**
     * Anota un test con información de sprint
     */
    public static void sprintInfo(String sprintId) {
        Allure.label("sprint", sprintId);
        Allure.label("jira", "https://jira.example.com/browse/" + sprintId);
        Allure.label("status", "active");
    }

    /**
     * Anota un test con información de milestone
     */
    public static void milestoneInfo(String milestoneId) {
        Allure.label("milestone", milestoneId);
        Allure.label("jira", "https://jira.example.com/browse/" + milestoneId);
        Allure.label("status", "active");
    }

    /**
     * Anota un test con información de tag
     */
    public static void tagInfo(String... tags) {
        for (String tag : tags) {
            Allure.label("tag", tag);
        }
    }

    /**
     * Anota un test con información de categoría
     */
    public static void categoryInfo(String category) {
        Allure.label("category", category);
    }

    /**
     * Anota un test con información de subcategoría
     */
    public static void subcategoryInfo(String subcategory) {
        Allure.label("subcategory", subcategory);
    }

    /**
     * Anota un test con información de módulo
     */
    public static void moduleInfo(String module) {
        Allure.label("module", module);
    }

    /**
     * Anota un test con información de submodule
     */
    public static void submoduleInfo(String submodule) {
        Allure.label("submodule", submodule);
    }
}
